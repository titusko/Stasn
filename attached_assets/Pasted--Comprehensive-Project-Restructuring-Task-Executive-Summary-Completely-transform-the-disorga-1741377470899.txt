# Comprehensive Project Restructuring Task

## Executive Summary
Completely transform the disorganized codebase into a production-ready, scalable monorepo architecture with automated tooling, comprehensive testing, and CI/CD integration. This plan includes specific technical solutions for each identified issue, automation scripts to prevent future regressions, and detailed implementation steps.

## Architecture Overview
Implement a Turborepo-powered monorepo with strictly typed package boundaries, automated dependency management, and clear separation of concerns:

```
/
├── apps/
│   ├── web/                  # Next.js frontend application
│   └── api/                  # Backend API service
├── packages/
│   ├── blockchain/           # Smart contract development & interactions
│   ├── ui/                   # Shared UI components
│   ├── config/               # Shared configurations
│   ├── tsconfig/             # Shared TypeScript configurations
│   ├── eslint-config/        # Shared ESLint configurations
│   ├── ipfs/                 # IPFS integration utilities
│   └── contracts-sdk/        # Auto-generated contract SDK
├── tooling/
│   ├── generators/           # Code generators
│   ├── scripts/              # Utility scripts
│   └── ci/                   # CI/CD configuration
├── turbo.json                # Turborepo configuration
├── pnpm-workspace.yaml       # PNPM workspace configuration
├── package.json              # Root package.json
├── tsconfig.json             # Root TypeScript configuration
└── .env.example              # Example environment variables
```

## Detailed Implementation Plan

### 1. Project Structure & Tooling (Foundation)

#### 1.1 Turborepo & PNPM Setup
```json
// turbo.json
{
  "$schema": "https://turbo.build/schema.json",
  "globalDependencies": [".env"],
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**", ".next/**", "build/**"]
    },
    "test": {
      "dependsOn": ["^build"],
      "outputs": ["coverage/**"]
    },
    "lint": {},
    "dev": {
      "cache": false,
      "persistent": true
    },
    "clean": {
      "cache": false
    },
    "typecheck": {}
  }
}
```

```yaml
# pnpm-workspace.yaml
packages:
  - "apps/*"
  - "packages/*"
  - "tooling/*"
```

#### 1.2 Root Package Configuration
```json
// package.json
{
  "name": "project-monorepo",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev",
    "lint": "turbo run lint",
    "test": "turbo run test",
    "typecheck": "turbo run typecheck",
    "clean": "turbo run clean && rm -rf node_modules",
    "format": "prettier --write \"**/*.{ts,tsx,md}\"",
    "prepare": "husky install",
    "create:component": "node ./tooling/generators/component.js",
    "create:package": "node ./tooling/generators/package.js",
    "check:deps": "npx depcheck",
    "purge:nodemodules": "find . -name 'node_modules' -type d -prune -exec rm -rf {} +",
    "generate:sdk": "node ./tooling/generators/contracts-sdk.js"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.0.3",
    "@commitlint/config-conventional": "^19.0.3",
    "eslint": "^8.57.0",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.2",
    "prettier": "^3.2.5",
    "turbo": "^2.0.1",
    "typescript": "^5.3.3"
  },
  "packageManager": "pnpm@8.15.4"
}
```

#### 1.3 TypeScript Configuration Cascade
```json
// packages/tsconfig/base.json
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true,
    "strictNullChecks": true
  },
  "exclude": ["node_modules"]
}
```

```json
// packages/tsconfig/nextjs.json
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "allowJs": true,
    "declaration": false,
    "declarationMap": false,
    "incremental": true,
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "noEmit": true,
    "resolveJsonModule": true,
    "target": "es5"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules", ".next", "dist"]
}
```

```json
// packages/tsconfig/react-library.json
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "lib": ["ES2015", "DOM"],
    "module": "ESNext",
    "target": "es6"
  }
}
```

```json
// packages/tsconfig/blockchain.json
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Blockchain",
  "extends": "./base.json",
  "compilerOptions": {
    "module": "commonjs",
    "target": "es2020",
    "resolveJsonModule": true
  }
}
```

### 2. Code Quality & Automation

#### 2.1 ESLint Configuration
```js
// packages/eslint-config/next.js
module.exports = {
  extends: [
    "next",
    "turbo",
    "prettier",
    "plugin:@typescript-eslint/recommended"
  ],
  plugins: ["@typescript-eslint"],
  rules: {
    "@next/next/no-html-link-for-pages": "off",
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
    "react/jsx-key": "warn",
    "react/no-unescaped-entities": "off"
  },
  parserOptions: {
    babelOptions: {
      presets: [require.resolve("next/babel")],
    },
  },
};
```

#### 2.2 Husky & Lint-Staged Configuration
```js
// .husky/pre-commit
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx lint-staged
```

```json
// .lintstagedrc
{
  "*.{js,jsx,ts,tsx}": [
    "eslint --fix",
    "prettier --write"
  ],
  "*.{json,md,mdx,css,html}": [
    "prettier --write"
  ]
}
```

#### 2.3 Custom Code Generators
```js
// tooling/generators/component.js
const fs = require('fs');
const path = require('path');
const prompts = require('prompts');

async function generateComponent() {
  const response = await prompts([
    {
      type: 'text',
      name: 'name',
      message: 'What is your component name?'
    },
    {
      type: 'select',
      name: 'type',
      message: 'What type of component?',
      choices: [
        { title: 'UI Component', value: 'ui' },
        { title: 'Page Component', value: 'page' },
        { title: 'Layout Component', value: 'layout' }
      ]
    },
    {
      type: 'confirm',
      name: 'withStyles',
      message: 'Include styles?'
    },
    {
      type: 'confirm',
      name: 'withTests',
      message: 'Include tests?'
    }
  ]);

  // Generate component files based on response
  const componentDir = path.join(
    __dirname, 
    '../../',
    response.type === 'ui' ? 'packages/ui/src/components' : 'apps/web/src/components',
    response.name
  );
  
  fs.mkdirSync(componentDir, { recursive: true });
  
  // Generate component file
  const componentContent = `import React from 'react';
${response.withStyles ? `import styles from './${response.name}.module.css';` : ''}

export interface ${response.name}Props {
  children?: React.ReactNode;
}

export const ${response.name} = ({ children }: ${response.name}Props) => {
  return (
    <div${response.withStyles ? ` className={styles.container}` : ''}>
      {children}
    </div>
  );
};
`;

  fs.writeFileSync(
    path.join(componentDir, `${response.name}.tsx`),
    componentContent
  );

  // Generate styles if needed
  if (response.withStyles) {
    fs.writeFileSync(
      path.join(componentDir, `${response.name}.module.css`),
      `.container {\n  /* Add styles here */\n}\n`
    );
  }

  // Generate test if needed
  if (response.withTests) {
    const testContent = `import { render, screen } from '@testing-library/react';
import { ${response.name} } from './${response.name}';

describe('${response.name}', () => {
  it('renders correctly', () => {
    render(<${response.name}>Test</${response.name}>);
    expect(screen.getByText('Test')).toBeInTheDocument();
  });
});
`;
    fs.writeFileSync(
      path.join(componentDir, `${response.name}.test.tsx`),
      testContent
    );
  }

  // Generate index file for exporting
  fs.writeFileSync(
    path.join(componentDir, 'index.ts'),
    `export * from './${response.name}';\n`
  );

  console.log(`✅ Generated ${response.name} component`);
}

generateComponent().catch(console.error);
```

```js
// tooling/generators/contracts-sdk.js
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// This script generates TypeScript SDK from compiled contracts
async function generateContractsSDK() {
  console.log('Generating Contract SDK...');
  
  // Ensure blockchain package is built
  execSync('pnpm --filter blockchain build', { stdio: 'inherit' });
  
  const artifactsDir = path.join(__dirname, '../../packages/blockchain/artifacts/contracts');
  const sdkDir = path.join(__dirname, '../../packages/contracts-sdk/src');
  
  // Create SDK directory if it doesn't exist
  fs.mkdirSync(sdkDir, { recursive: true });
  
  // Generate index file
  let indexContent = `// Auto-generated by contracts-sdk.js\n// DO NOT EDIT DIRECTLY\n\n`;
  
  // Read all contract artifacts
  const contracts = fs.readdirSync(artifactsDir)
    .filter(file => file.endsWith('.json'))
    .map(file => {
      const contractName = path.basename(file, '.json');
      const artifact = JSON.parse(fs.readFileSync(path.join(artifactsDir, file), 'utf8'));
      
      // Generate TypeScript file for contract
      const contractContent = `// Auto-generated by contracts-sdk.js
// DO NOT EDIT DIRECTLY

import { ethers } from 'ethers';

export const ${contractName}Address = '${process.env.CONTRACT_ADDRESS || '0x0000000000000000000000000000000000000000'}';

export const ${contractName}ABI = ${JSON.stringify(artifact.abi, null, 2)} as const;

export type ${contractName}Interface = ethers.BaseContract & {
${artifact.abi.filter(item => item.type === 'function').map(func => {
  const inputs = func.inputs.map(input => `${input.name}: ${getTypeScriptType(input.type)}`).join(', ');
  const outputs = func.outputs.length === 1 
    ? getTypeScriptType(func.outputs[0].type)
    : `[${func.outputs.map(output => getTypeScriptType(output.type)).join(', ')}]`;
  
  return `  ${func.name}(${inputs}): Promise<${outputs}>;`;
}).join('\n')}
};

export function get${contractName}Contract(
  provider: ethers.Provider | ethers.Signer
): ${contractName}Interface {
  return new ethers.Contract(
    ${contractName}Address,
    ${contractName}ABI,
    provider
  ) as unknown as ${contractName}Interface;
}
`;
      
      fs.writeFileSync(path.join(sdkDir, `${contractName}.ts`), contractContent);
      indexContent += `export * from './${contractName}';\n`;
      
      return contractName;
    });
  
  // Write index file
  fs.writeFileSync(path.join(sdkDir, 'index.ts'), indexContent);
  
  // Update package.json version
  const packageJsonPath = path.join(__dirname, '../../packages/contracts-sdk/package.json');
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  // Increment patch version
  const versionParts = packageJson.version.split('.');
  versionParts[2] = (parseInt(versionParts[2]) + 1).toString();
  packageJson.version = versionParts.join('.');
  
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  
  console.log(`✅ Generated SDK for ${contracts.length} contracts`);
  console.log(`✅ Updated contracts-sdk to version ${packageJson.version}`);
}

function getTypeScriptType(solidityType) {
  if (solidityType.includes('uint') || solidityType.includes('int')) return 'bigint';
  if (solidityType === 'bool') return 'boolean';
  if (solidityType === 'address') return 'string';
  if (solidityType.includes('bytes')) return 'string';
  if (solidityType === 'string') return 'string';
  if (solidityType.includes('[]')) return `${getTypeScriptType(solidityType.replace('[]', ''))}[]`;
  return 'any';
}

generateContractsSDK().catch(console.error);
```

### 3. Package-Specific Implementation

#### 3.1 Blockchain Package
```json
// packages/blockchain/package.json
{
  "name": "blockchain",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "rm -rf artifacts cache typechain-types",
    "compile": "hardhat compile",
    "test": "hardhat test",
    "deploy:local": "hardhat run scripts/deploy.ts --network localhost",
    "deploy:testnet": "hardhat run scripts/deploy.ts --network sepolia",
    "deploy:mainnet": "hardhat run scripts/deploy.ts --network mainnet",
    "node": "hardhat node",
    "build": "tsc && hardhat compile",
    "typecheck": "tsc --noEmit",
    "lint": "eslint ."
  },
  "devDependencies": {
    "@nomicfoundation/hardhat-toolbox": "^4.0.0",
    "@typechain/ethers-v6": "^0.5.1",
    "@typechain/hardhat": "^9.1.0",
    "@types/chai": "^4.3.11",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.11.20",
    "chai": "^4.4.1",
    "dotenv": "^16.4.5",
    "eslint": "^8.57.0",
    "eslint-config-custom": "workspace:*",
    "hardhat": "^2.20.0",
    "hardhat-deploy": "^0.11.45",
    "hardhat-gas-reporter": "^1.0.10",
    "solidity-coverage": "^0.8.7",
    "ts-node": "^10.9.2",
    "typechain": "^8.3.2",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@openzeppelin/contracts": "^5.0.1",
    "ethers": "^6.8.1"
  }
}
```

```ts
// packages/blockchain/hardhat.config.ts
import { HardhatUserConfig } from "hardhat/config";
import "@nomicfoundation/hardhat-toolbox";
import "hardhat-deploy";
import "hardhat-gas-reporter";
import "solidity-coverage";
import * as dotenv from "dotenv";

dotenv.config({ path: "../../.env" });

const config: HardhatUserConfig = {
  solidity: {
    version: "0.8.20",
    settings: {
      optimizer: {
        enabled: true,
        runs: 200
      }
    }
  },
  networks: {
    hardhat: {
      chainId: 1337
    },
    localhost: {
      url: "http://127.0.0.1:8545"
    },
    sepolia: {
      url: process.env.SEPOLIA_URL || "",
      accounts: process.env.PRIVATE_KEY ? [process.env.PRIVATE_KEY] : []
    },
    mainnet: {
      url: process.env.MAINNET_URL || "",
      accounts: process.env.PRIVATE_KEY ? [process.env.PRIVATE_KEY] : [],
      gasPrice: 30000000000 // 30 gwei
    }
  },
  gasReporter: {
    enabled: process.env.REPORT_GAS !== undefined,
    currency: "USD",
    coinmarketcap: process.env.COINMARKETCAP_API_KEY
  },
  etherscan: {
    apiKey: process.env.ETHERSCAN_API_KEY
  },
  paths: {
    sources: "./contracts",
    tests: "./test",
    cache: "./cache",
    artifacts: "./artifacts"
  },
  typechain: {
    outDir: "typechain-types",
    target: "ethers-v6"
  }
};

export default config;
```

#### 3.2 IPFS Package
```typescript
// packages/ipfs/src/ipfsService.ts
import axios from 'axios';
import FormData from 'form-data';
import fs from 'fs';
import { Readable } from 'stream';

export interface IPFSUploadOptions {
  name?: string;
  keyvalues?: Record<string, string>;
  pinataMetadata?: {
    name?: string;
    keyvalues?: Record<string, string>;
  };
  pinataOptions?: {
    cidVersion?: 0 | 1;
    customPinPolicy?: {
      regions: Array<{
        id: string;
        desiredReplicationCount: number;
      }>;
    };
  };
}

export interface IPFSUploadResponse {
  IpfsHash: string;
  PinSize: number;
  Timestamp: string;
  isDuplicate?: boolean;
}

export class IPFSService {
  private apiUrl: string;
  private jwt: string;

  constructor(jwt: string, apiUrl = 'https://api.pinata.cloud') {
    this.jwt = jwt;
    this.apiUrl = apiUrl;
  }

  private getAuthHeaders() {
    return {
      Authorization: `Bearer ${this.jwt}`
    };
  }

  /**
   * Upload a file to IPFS
   * @param file File path or Buffer/ReadableStream
   * @param options Upload options
   * @returns Upload response with IPFS hash
   */
  async uploadFile(
    file: string | Buffer | Readable,
    options: IPFSUploadOptions = {}
  ): Promise<IPFSUploadResponse> {
    try {
      const formData = new FormData();
      
      // Add file to form data
      if (typeof file === 'string') {
        // File path
        formData.append('file', fs.createReadStream(file));
      } else if (Buffer.isBuffer(file)) {
        // Buffer
        formData.append('file', file, { filename: options.name || 'file' });
      } else {
        // ReadableStream
        formData.append('file', file, { filename: options.name || 'file' });
      }

      // Add metadata if provided
      if (options.pinataMetadata) {
        formData.append('pinataMetadata', JSON.stringify(options.pinataMetadata));
      }

      // Add options if provided
      if (options.pinataOptions) {
        formData.append('pinataOptions', JSON.stringify(options.pinataOptions));
      }

      // Make the request to Pinata
      const response = await axios.post(
        `${this.apiUrl}/pinning/pinFileToIPFS`,
        formData,
        {
          maxBodyLength: Infinity,
          headers: {
            ...this.getAuthHeaders(),
            ...formData.getHeaders()
          }
        }
      );

      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        throw new Error(`IPFS upload failed: ${error.response?.data?.error || error.message}`);
      }
      throw error;
    }
  }

  /**
   * Upload JSON data to IPFS
   * @param jsonData The JSON data to upload
   * @param options Upload options
   * @returns Upload response with IPFS hash
   */
  async uploadJSON(
    jsonData: Record<string, any>,
    options: IPFSUploadOptions = {}
  ): Promise<IPFSUploadResponse> {
    try {
      const response = await axios.post(
        `${this.apiUrl}/pinning/pinJSONToIPFS`,
        {
          pinataContent: jsonData,
          pinataMetadata: options.pinataMetadata,
          pinataOptions: options.pinataOptions
        },
        {
          headers: this.getAuthHeaders()
        }
      );

      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        throw new Error(`IPFS JSON upload failed: ${error.response?.data?.error || error.message}`);
      }
      throw error;
    }
  }

  /**
   * Get data for a specific IPFS hash
   * @param ipfsHash The IPFS hash to retrieve
   * @returns The data from IPFS
   */
  async getContent(ipfsHash: string): Promise<any> {
    try {
      // Use public IPFS gateway
      const response = await axios.get(`https://gateway.pinata.cloud/ipfs/${ipfsHash}`);
      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        throw new Error(`Failed to retrieve IPFS content: ${error.message}`);
      }
      throw error;
    }
  }

  /**
   * Unpin content from IPFS
   * @param ipfsHash The IPFS hash to unpin
   * @returns Success status
   */
  async unpinContent(ipfsHash: string): Promise<boolean> {
    try {
      await axios.delete(
        `${this.apiUrl}/pinning/unpin/${ipfsHash}`,
        {
          headers: this.getAuthHeaders()
        }
      );
      return true;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        throw new Error(`Failed to unpin content: ${error.response?.data?.error || error.message}`);
      }
      throw error;
    }
  }
}

export default IPFSService;
```

#### 3.3 Frontend Next.js Application
```typescript
// apps/web/src/hooks/useIpfsUpload.ts
import { useState, useCallback } from 'react';
import axios from 'axios';

interface UploadOptions {
  name?: string;
  metadata?: Record<string, string>;
}

interface UploadResult {
  ipfsHash: string;
  pinSize: number;
  timestamp: string;
}

export function useIpfsUpload() {
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [uploadResult, setUploadResult] = useState<UploadResult | null>(null);

  const uploadFile = useCallback(async (file: File, options?: UploadOptions) => {
    setIsUploading(true);
    setError(null);
    setUploadResult(null);

    try {
      const formData = new FormData();
      formData.append('file', file);
      
      if (options?.name) {
        formData.append('name', options.name);
      }
      
      if (options?.metadata) {
        formData.append('metadata', JSON.stringify(options.metadata));
      }

      const response = await axios.post('/api/ipfs/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      setUploadResult({
        ipfsHash: response.data.IpfsHash,
        pinSize: response.data.PinSize,
        timestamp: response.data.Timestamp,
      });
      
      return response.data;
    } catch (err) {
      const errorMessage = 
        axios.isAxiosError(err) 
          ? err.response?.data?.message || err.message
          : 'Upload failed';
      
      setError(errorMessage);
      throw err;
    } finally {
      setIsUploading(false);
    }
  }, []);

  const reset = useCallback(() => {
    setError(null);
    setUploadResult(null);
  }, []);

  return {
    uploadFile,
    isUploading,
    error,
    uploadResult,
    reset,
  };
}
```

```typescript
// apps/web/src/components/TaskSubmitModal/TaskSubmitModal.tsx
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { useIpfsUpload } from '@/hooks/useIpfsUpload';
import { useContractWrite } from '@/hooks/useContractWrite';
import { TaskContract } from 'contracts-sdk';
import { AlertCircle, Upload, FileIcon } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface TaskSubmitModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess?: (taskId: string, ipfsHash: string) => void;
}

export function TaskSubmitModal({ isOpen, onClose, onSuccess }: TaskSubmitModalProps) {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const { uploadFile, isUploading, error: uploadError, uploadResult } = useIpfsUpload();
  
  const { write, isLoading: isSubmitting, error: contractError } = useContractWrite({
    contract: TaskContract,
    method: 'submitTask',
  });

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!title || !description) {
      return;
    }
    
    try {
      // Step 1: Upload file to IPFS if selected
      let ipfsHash = '';
      
      if (selectedFile) {
        const result = await uploadFile(selectedFile, {
          name: title,
          metadata: {
            description,
          },
        });
        ipfsHash = result.IpfsHash;
      }
      
      // Step 2: Create metadata for task
      const taskMetadata = {
        title,
        description,
        attachment: ipfsHash || '',
        timestamp: new Date().toISOString(),
      };
      
      // Step 3: Submit to blockchain
      const result = await write([title, JSON.stringify(taskMetadata)]);
      
      // Step 4: Handle success
      if (result && onSuccess) {
        onSuccess(result.taskId.toString(), ipfsHash);
      }
      
      // Reset form
      setTitle('');
      setDescription('');
      setSelectedFile(null);
      onClose();
    } catch (error) {
      console.error('Error submitting task:', error);
    }
  };

  const error = uploadError || contractError;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Submit New Task</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                required
              />
            </div>
            
            <div className="grid gap-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows={4}
                required
              />
            </div>
            
            <div className="grid gap-2">
              <Label htmlFor="attachment">Attachment (Optional)</Label>
              <div className="flex items-center gap-2">
                <Input
                  id="attachment"
                  type="file"
                  onChange={handleFileChange}
                  className="hidden"
                />
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => document.getElementByI